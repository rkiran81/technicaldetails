explain java memory model in detail
	The Java Memory Model (JMM) is a specification that defines how threads interact through memory when executing Java programs. 
	It provides rules and guarantees for the visibility of shared data between threads, synchronization, and the ordering of memory operations.
	Shared Memory: 
		In Java, multiple threads can access shared objects and variables concurrently. 
		The Java Memory Model defines how changes made by one thread become visible to other threads.
	Thread Communication: 
		Threads communicate through shared memory. When one thread modifies a shared variable, other threads need to see that modification. 
		The Java Memory Model ensures that changes made by one thread become visible to other threads in a predictable manner.
	Visibility Guarantees: 
		The Java Memory Model guarantees that changes to shared variables made by one thread are visible to other threads. 
		However, without proper synchronization, there are no guarantees about when these changes will become visible.
	Volatile Variables: 
		The volatile keyword in Java ensures that any thread reading a volatile variable sees the most recent write to that variable. 
		It prevents compiler optimizations that could reorder reads and writes around the volatile variable.
	Synchronization: 
		Java provides synchronized blocks and methods to ensure exclusive access to critical sections of code. 
		Synchronization also establishes a memory barrier, ensuring that changes made by a thread before releasing a lock become visible to other 
		threads after acquiring the same lock.
	Happens-Before Relationship: 
		The happens-before relationship defines the ordering of memory operations in Java. If operation A happens-before operation B, 
		then the effects of A are visible to B. Certain actions, such as acquiring a lock before releasing it, 
		establish a happens-before relationship between the actions before and after the lock operation.
	Memory Consistency: 
		The Java Memory Model provides guarantees about the consistency of shared memory across threads. 
		It ensures that if a program is correctly synchronized, it behaves consistently regardless of the platform or JVM implementation.
	Final Fields: 
		When a field is declared final in Java, it ensures that its initialization is visible to all threads before the object reference 
		containing that field becomes visible. This provides a safe publication guarantee for immutable objects.
	Atomic Operations: 
		Java provides atomic operations through classes like java.util.concurrent.atomic.AtomicInteger, AtomicBoolean, etc. 
		These classes ensure that operations like read-modify-write are performed atomically without the need for explicit synchronization.
	Memory Barriers: 
		Memory barriers are instructions that enforce ordering and visibility guarantees for memory operations. 
		In Java, synchronization constructs like synchronized blocks and volatile variables implicitly introduce memory barriers.

Discuss The Differences Between The Serializable And Externalizable Interfaces In Java
	The Serializable interface is a marker interface, meaning it does not contain any methods
	The Externalizable interface extends Serializable but requires the implementing class to define its own serialization and deserialization logic.
	It contains two methods: writeExternal() for serialization and readExternal() for deserialization. 
	These methods must be implemented by the class to customize the serialization process.

Could You Provide The Differences Between Heap And Stack Memory In The Context Of Java, And Also Provide Insights Into How These Memory Areas Are Used?
	Allocation and Purpose:

		Heap Memory: 
			The heap is a region of memory where objects are allocated dynamically. It is used for storing objects created during the execution 
			of a Java program using the new keyword. Objects on the heap persist until they are no longer referenced and are garbage collected.
		Stack Memory: 
			The stack is a region of memory that stores method frames, each containing local variables, method parameters, and the return address. 
			It is used for method calls and local variables of primitive data types and object references. Method frames are pushed onto the stack 
			when a method is called and popped off when the method returns.
	Lifetime:
		Heap Memory: 
			Objects allocated on the heap have a dynamic lifetime. They persist until they are no longer referenced and are eligible for garbage 
			collection. The garbage collector manages the heap memory by reclaiming memory occupied by objects that are no longer reachable.
		Stack Memory: 
			The lifetime of variables in the stack is determined by their method's execution. Local variables are created when a method is invoked 
			and are destroyed when the method exits. Thus, stack memory is deallocated automatically as method calls return.
	Concurrency:
		Heap Memory: 
			The heap is accessible to all threads in a Java application and is shared among them. Multiple threads can access and modify objects 
			stored in the heap concurrently, which requires synchronization mechanisms to ensure thread safety.
		Stack Memory: 
			Each thread in a Java application has its own stack, which is not shared with other threads. As a result, access to stack memory is 
			inherently thread-safe, as each thread has its own stack frame for method invocations.
	Size and Flexibility:
		Heap Memory: 
			The heap memory is typically larger than the stack memory, and its size can be adjusted using JVM options. 
			The heap is flexible and can grow or shrink dynamically during the execution of a Java program.
		Stack Memory: 
			The stack memory is fixed in size and determined at the start of the program. It is generally smaller than the heap memory and cannot 
			be resized during runtime.
	Data Types:
		Heap Memory: 
			Objects of all types, including user-defined classes and arrays, are allocated on the heap.
		Stack Memory: 
			The stack mainly stores primitive data types (int, char, boolean, etc.), method parameters, and object references.

Explain The Differences Between Abstract Classes And Interfaces In Java. When Should You Use One Over The Other?

Explain The Concept Of Method Overloading And Method Overriding In Java. What Are The Rules For Each?

Method Overloading:
	Method Signature: 
		The overloaded methods must have different parameter lists. This includes the number of parameters and their types.
	Return Type: 
		same or different return types. However, overloading based solely on the return type is not allowed in Java.
	Access Modifier: 
		can have different access modifiers (public, protected, default, or private).
	Exceptions: 
		can declare different checked exceptions in their throws clause, or they can choose not to declare any exceptions.
	Static Methods: 
		Overloaded methods can include static methods.
	Inheritance: 
		can be inherited by subclasses and can be overridden, but the subclass cannot change the parameter list of the overridden method.
Method Overriding:
	Method Signature: 
		method must have the same name and parameter list (including the order and types of parameters) as the method in the superclass.
	Return Type: 
		must be the same as, or a subtype of, the return type of the overridden method. 
		However, in Java 5 and later, you can use covariant return types.
	Access Modifier: 
		can be the same or more accessible than the overridden method. It cannot be more restrictive.
	Exception Handling: 
		can throw fewer exceptions than the overridden method, 
		but it cannot throw checked exceptions that are broader or new checked exceptions that are not in the overridden method's throws clause.
	Static Methods: 
		Static methods cannot be overridden in Java. However, they can be re-declared in subclasses.

Explain The Difference Between Final, Finally, And Finalize In Java.
	final
		restrict the behavior of classes(cannot subclass), methods(cannot ovveride), and variables 
		(indicates that the variable's value cannot be changed once assigned (it becomes a constant). 
		For non-primitive types, the reference to the object cannot be changed, but the object's state can be modified if it is mutable.).
	finally 
		define code that will be executed regardless of whether an exception is thrown or not.
	finalize 
		is a method in the Object class called by the garbage collector before an object is garbage collected, allowing for cleanup operations.
		The finalize method can be overridden by subclasses to provide custom cleanup or resource release operations. 
		However, it's generally discouraged to rely on finalize for resource cleanup because its execution timing is not guaranteed.

Explain The Difference Between The Comparable And Comparator Interfaces In Java.
Comparable Interface:
	The Comparable interface is implemented by a class whose objects need to be sorted.
	It contains a single method, compareTo(), which is used to define the natural ordering of objects.
	The compareTo() method compares the current object (this) with another object passed as an argument and returns a negative integer, zero, or a 
	positive integer depending on whether the current object is less than, equal to, or greater than the other object, respectively.
	Classes that implement Comparable can be sorted using the Arrays.sort() method or by using collections that automatically sort elements, 
	such as TreeSet or TreeMap.
Comparator Interface:
	The Comparator interface is used to define custom comparison logic for sorting objects.
	It is typically implemented as a separate class or as a lambda expression.
	The Comparator interface contains a single method, compare(), which takes two objects as arguments and returns a negative integer, zero, or a 
	positive integer depending on whether the first object is less than, equal to, or greater than the second object, respectively.
	Comparator objects can be used to sort objects in a way that is different from their natural ordering, or to sort objects of classes 
	that do not implement Comparable.
	They are often used in conjunction with sorting methods that accept a Comparator parameter, such as Collections.sort().

What Are The Key Differences Between ArrayList And LinkedList In Java?	
	
What Is The Difference Between Checked And Unchecked Exceptions In Java?
	In summary, checked exceptions are enforced by the compiler and must be explicitly handled or declared, whereas unchecked exceptions are not 
	enforced by the compiler and may or may not be handled by the programmer. Understanding the differences between checked and unchecked exceptions 
	is crucial for writing robust and maintainable Java code.
	
explain Serializable and the Cloneable interfaces in java
	