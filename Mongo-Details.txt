What is $$ROOT in MongoDB aggregate and how it works?
https://devpress.csdn.net/mongodb/6303baf07e66823466198c0b.html

MongoDB Basic Document Grouping
https://medium.com/@ophirharpaz/mongodb-basic-document-grouping-c53126c20f34

db.inventory.insertMany( [
   { prodId: 100, price: 20, quantity: 125 },
   { prodId: 101, price: 10, quantity: 234 },
   { prodId: 102, price: 15, quantity: 432 },
   { prodId: 103, price: 17, quantity: 320 }
] );

db.inventory.insertMany([
	{prodId: 104,price: 25,quantity: 150},
	{prodId: 105,price: 27,quantity: 190}
]);

db.orders.insertMany( [
   { orderId: 201, custid: 301, prodId: 100, numPurchased: 20 },
   { orderId: 202, custid: 302, prodId: 101, numPurchased: 10 },
   { orderId: 203, custid: 303, prodId: 102, numPurchased: 5 },
   { orderId: 204, custid: 303, prodId: 103, numPurchased: 15 },
   { orderId: 205, custid: 303, prodId: 103, numPurchased: 20 },
   { orderId: 206, custid: 302, prodId: 102, numPurchased: 1 },
   { orderId: 207, custid: 302, prodId: 101, numPurchased: 5 },
   { orderId: 208, custid: 301, prodId: 100, numPurchased: 10 },
   { orderId: 209, custid: 303, prodId: 103, numPurchased: 30 }
] );

db.orders.insertMany([
	{orderId: 210,custid: 301,prodId: 104, numPurchased: 20 },
	{orderId: 211,custid: 301,prodId: 105, numPurchased: 25 }
]);

db.collection.find(query, projection, options)
db.orders.find({},{"_id":0, "custid":1, "prodId":1});
db.orders.find({},{"_id":0, "custid":"Customer Id", "prodId":"Product Id"}); will print "Customer Id" as value
db.orders.find({},{"_id":0, "custid":1, "prodId":1},{"limit":2});
//in mongosh automatically iterates the cursor to display up to the first 20 documents. Type it to continue iteration/
db.orders.find({numPurchased:{$gt:25}},{"_id":0, "custid":1, "prodId":1});

db.inventory1.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

db.inventory1.find({status: {$in: ["A","D"]}}, {"_id":0, "item":1, "qty":1});
db.inventory1.find({status: "D", qty: {$gt:75}}, {"_id":0, "item":1, "qty":1});
//{ $or: [ { status: 'A' }, { qty: { $lt: 30 } } ] }
db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} );
db.inventory.find( { "size.h": { $lt: 15 }, "size.uom": "in", status: "D" } );
db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } );

																			Arrays
db.inventory2.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);

db.inventory2.find({tags: ["red", "blank"]}, {"_id":0, "item":1, "qty":1});//exact match including order
db.inventory2.find({tags: {$all:["red", "blank"]}}, {"_id":0, "item":1, "qty":1});//contains match irrespective of order
db.inventory2.find({tags: "red"}, {"_id":0, "item":1, "qty":1});//queries for all documents where tags is an array that contains the string "red" as one of its elements
db.inventory2.find( { dim_cm: { $gt: 15, $lt: 20 } }, {"_id":0, "item":1, "qty":1} );//matches all which is greater than 15 or less than 20
db.inventory2.find( { dim_cm: {$elemMatch : { $gt: 15, $lt: 20 }} }, {"_id":0, "item":1, "qty":1} );//AND match
db.inventory2.find( { "dim_cm.1": { $gt: 25 } } );
db.inventory.find( { "tags": { $size: 3 } } );//array size


																		Arrays of embedded documents
db.inventory3.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);	
db.inventory3.find( { "instock": { warehouse: "A", qty: 5 } },{_id:0;item:1} )	;			// exact match including order	
db.inventory3.find( { "instock.qty": { $lte: 20 } } );
db.inventory3.find( { 'instock.0.qty': { $lte: 20 } } )	
db.inventory3.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } },{"_id":0,"item":1} );
db.inventory3.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } );
db.inventory3.find( { "instock.qty": 5, "instock.warehouse": "A" },{"_id":0,"item":1} );	
db.inventory3.find( { "instock.qty": 5, "instock.warehouse": "A" },{"_id":0,"item":1} );
db.inventory3.find({instock: { $elemMatch: {$or:[{qty:5}, {warehouse:"A"}]}}},{"_id":0,"item":1});	

db.table1.insertMany([
{
        "item_code" : "I001",
        "category" : [
                "boy",
                "girl"
        ],
        "description" : [
                {
                        "agegroup" : "3-5",
                        "flavour" : "chocolate",
                        "price" : 5
                },
                {
                        "agegroup" : "6-9",
                        "flavour" : "strawberry",
                        "price" : 6
                },
                {
                        "agegroup" : "10-13",
                        "flavour" : "mango",
                        "price" : 7
                }
        ]
},
{
        "item_code" : "I002",
        "category" : [
                "boy",
                "girl"
        ],
        "description" : [
                {
                        "agegroup" : "3-5",
                        "flavour" : "vanilla",
                        "price" : 3
                },
                {
                        "agegroup" : "6-9",
                        "flavour" : "lemon",
                        "price" : 6
                },
                {
                        "agegroup" : "10-13",
                        "flavour" : "mango",
                        "price" : 5
                }
        ]
},
{
        "item_code" : "I003",
        "category" : [
                "boy",
                "girl"
        ],
        "description" : [
                {
                        "agegroup" : "3-5",
                        "flavour" : "pineapple",
                        "price" : 5
                },
                {
                        "agegroup" : "6-9",
                        "flavour" : "mango",
                        "price" : 6
                },
                {
                        "agegroup" : "10-13",
                        "flavour" : "vanilla",
                        "price" : 5
                }
        ]
}]);

																Projection
db.inventory4.insertMany( [
  { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse: "A", qty: 5 } ] },
  { item: "notebook", status: "A",  size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "C", qty: 5 } ] },
  { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A", qty: 60 } ] },
  { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ { warehouse: "A", qty: 40 } ] },
  { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);	
db.inventory4.find({"status":"A"});		
db.inventory4.find({"status":"A"},{"item":1,"status":1});
db.inventory4.find({"status":"A"},{"instock":0,"status":0});			// all fields except these two	
db.inventory4.find({"status":"A"},{"instock":0,"status":0});
db.inventory4.find({"status":"A"},{"item":1,"status":1,"size.h":1});	// return only specific field from embedded doc	
$elemMatch, $slice, and $ are the only operators that you can use to project specific elements to include in the returned array.
{ <arrayField>: { $slice: [ <number>, <number> ] } }	
$slice: <number>	- 
					Specify a positive number n to return the first n elements.
					Specify a negative number n to return the last n elements.
					If the <number> is greater than the number of array elements, the query returns all array elements.
$slice: [ <number to skip>, <number to return> ]
	<number to skip>
					positive n from start and negative n from back ward to skip
	<number to return>
					positive n to return afterskip from forward and negative n to return afterskip from backward
					//The following example uses the $slice projection operator to return the last element in the instock array:
db.inventory4.find( { "status": "A" }, { "item": 1, "status": 1, "instock": { $slice: -1 } } );		

db.posts.insertMany([
   {
     _id: 1,
     title: "Bagels are not croissants.",
     comments: [ { comment: "0. true" }, { comment: "1. croissants aren't bagels."} ]
   },
   {
     _id: 2,
     title: "Coffee please.",
     comments: [ { comment: "0. fooey" }, { comment: "1. tea please" }, { comment: "2. iced coffee" }, { comment: "3. cappuccino" }, { comment: "4. whatever" } ]
   }
]);	
//Return an Array with Its First 3 Elements
db.posts.find({},{title:1, comments: {$slice:3}});
//Return an Array with Its Last 3 Elements
db.posts.find({},{title:1, comments: {$slice:-3}});
//Return an Array with 3 Elements After Skipping the First Element
db.posts.find({},{title:1, comments: {$slice:[1,3]}});
//Return an Array with 3 Elements After Skipping the Last Element
db.posts.find({},{title:1, comments: {$slice:[-1,3]}});

																Project Fields with Aggregation Expressions
db.inventory4.insertMany( [
  { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse: "A", qty: 5 } ] },
  { item: "notebook", status: "A",  size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "C", qty: 5 } ] },
  { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A", qty: 60 } ] },
  { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ { warehouse: "A", qty: 40 } ] },
  { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);
$switch: {
   branches: [
      { case: <expression>, then: <expression> },
      { case: <expression>, then: <expression> },
      ...
   ],
   default: <expression>
}
//exclude id,include item, i status A/D display values as Available/Discountinued else "No status found", area: size.h*size.w" "size.uom
// {	$toString : <expression>	}
{	$convert: {input: <expression>, to: "string"}	}
{ $concat: [ <expression1>, <expression2>, ... ] }

db.inventory4.find({},{
	_id:0,
	item:1,
	status:{
		$switch:{
			branches:[
				{case: {$eq: ["$status", "A"]}, then:"Available"},
				{case: {$eq: ["$status", "D"]}, then:"Discountinued"}
			],
			default: "Not status found"
		}
	},
	area: {
			$concat:[
				{	$toString:{	$multiply: ["$size.h", "$size.w"]	}},
				" ",
				"$size.uom"
			]
	},
	reportNumber : {$literal: 1}
});


													Query for Null or Missing Fields
db.inventory.find({ item: null});
db.inventory.find({ item: { $type : 10}}); BSONType 10 = null
db.inventory.find({ item: { $ne: null } });
db.inventory.find({ item: {$exists : false}});												