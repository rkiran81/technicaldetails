													S - SINGLE RESPONSIBILITY PRINCIPLE
The single responsibility principle states that every Java class must perform a single functionality. 
Implementation of multiple functionalities in a single class mashup the code


													O
The open-closed principle states that according to new requirements the module should be open for extension but closed for 
modification


													L - LESKOV'S SUBSTITUION PRINCIPLE
It applies to inheritance in such a way that the derived classes must be completely substitutable for their base classes. 
In other words, if class A is a subtype of class B, then we should be able to replace B with A without interrupting the 
behaviour of the program.
It promotes code reusability by allowing developers to use subclasses interchangeably with their parent classes 
without worrying about unexpected behavior.

													I - INTERFACE SEGREGATION
The principle states that the larger interfaces split into smaller ones. Because the
implementation classes use only the methods that are required. We should not force the client to use the methods that they do not want to use.
The goal of the interface segregation principle is similar to the single responsibility principle.

													D - DEPENDENCY INVERSION PRINCIPLE
The principle states that we must use abstraction (abstract classes and interfaces) instead of concrete implementations. 
High- level modules should not depend on the low-level module but both should depend on the abstraction